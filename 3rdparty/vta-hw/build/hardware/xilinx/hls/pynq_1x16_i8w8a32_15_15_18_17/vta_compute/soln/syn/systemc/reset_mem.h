// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _reset_mem_HH_
#define _reset_mem_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct reset_mem : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > sram_idx_V_read;
    sc_in< sc_lv<16> > range_V;
    sc_out< sc_lv<11> > mem_V_address0;
    sc_out< sc_logic > mem_V_ce0;
    sc_out< sc_lv<64> > mem_V_we0;
    sc_out< sc_lv<512> > mem_V_d0;
    sc_out< sc_lv<16> > ap_return;


    // Module declarations
    reset_mem(sc_module_name name);
    SC_HAS_PROCESS(reset_mem);

    ~reset_mem();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<16> > add_ln37_fu_70_p2;
    sc_signal< sc_lv<16> > add_ln37_reg_108;
    sc_signal< sc_lv<16> > i_fu_81_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<16> > add_ln700_fu_92_p2;
    sc_signal< sc_lv<1> > icmp_ln37_fu_76_p2;
    sc_signal< sc_lv<16> > t_V_reg_50;
    sc_signal< sc_lv<16> > i_op_assign_reg_59;
    sc_signal< sc_lv<64> > zext_ln544_fu_87_p1;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<512> ap_const_lv512_lc_1;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFFFF;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln37_fu_70_p2();
    void thread_add_ln700_fu_92_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_fu_81_p2();
    void thread_icmp_ln37_fu_76_p2();
    void thread_mem_V_address0();
    void thread_mem_V_ce0();
    void thread_mem_V_d0();
    void thread_mem_V_we0();
    void thread_zext_ln544_fu_87_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

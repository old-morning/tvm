// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fetch.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fetch::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fetch::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> fetch::ap_ST_fsm_state1 = "1";
const sc_lv<10> fetch::ap_ST_fsm_state2 = "10";
const sc_lv<10> fetch::ap_ST_fsm_state3 = "100";
const sc_lv<10> fetch::ap_ST_fsm_state4 = "1000";
const sc_lv<10> fetch::ap_ST_fsm_state5 = "10000";
const sc_lv<10> fetch::ap_ST_fsm_state6 = "100000";
const sc_lv<10> fetch::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> fetch::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> fetch::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<10> fetch::ap_ST_fsm_state14 = "1000000000";
const sc_lv<32> fetch::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool fetch::ap_const_boolean_1 = true;
const sc_lv<32> fetch::ap_const_lv32_1 = "1";
const sc_lv<32> fetch::ap_const_lv32_8 = "1000";
const bool fetch::ap_const_boolean_0 = false;
const sc_lv<1> fetch::ap_const_lv1_0 = "0";
const sc_lv<1> fetch::ap_const_lv1_1 = "1";
const int fetch::C_S_AXI_DATA_WIDTH = "100000";
const int fetch::C_M_AXI_INS_PORT_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int fetch::C_M_AXI_INS_PORT_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int fetch::C_M_AXI_INS_PORT_CACHE_VALUE = "11";
const int fetch::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> fetch::ap_const_lv32_7 = "111";
const sc_lv<3> fetch::ap_const_lv3_0 = "000";
const sc_lv<2> fetch::ap_const_lv2_0 = "00";
const sc_lv<4> fetch::ap_const_lv4_0 = "0000";
const sc_lv<32> fetch::ap_const_lv32_4 = "100";
const sc_lv<32> fetch::ap_const_lv32_1F = "11111";
const sc_lv<32> fetch::ap_const_lv32_9 = "1001";
const sc_lv<3> fetch::ap_const_lv3_1 = "1";
const sc_lv<3> fetch::ap_const_lv3_7 = "111";
const sc_lv<32> fetch::ap_const_lv32_2 = "10";
const sc_lv<128> fetch::ap_const_lv128_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<16> fetch::ap_const_lv16_0 = "0000000000000000";

fetch::fetch(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fetch_CONTROL_BUS_s_axi_U = new fetch_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>("fetch_CONTROL_BUS_s_axi_U");
    fetch_CONTROL_BUS_s_axi_U->AWVALID(s_axi_CONTROL_BUS_AWVALID);
    fetch_CONTROL_BUS_s_axi_U->AWREADY(s_axi_CONTROL_BUS_AWREADY);
    fetch_CONTROL_BUS_s_axi_U->AWADDR(s_axi_CONTROL_BUS_AWADDR);
    fetch_CONTROL_BUS_s_axi_U->WVALID(s_axi_CONTROL_BUS_WVALID);
    fetch_CONTROL_BUS_s_axi_U->WREADY(s_axi_CONTROL_BUS_WREADY);
    fetch_CONTROL_BUS_s_axi_U->WDATA(s_axi_CONTROL_BUS_WDATA);
    fetch_CONTROL_BUS_s_axi_U->WSTRB(s_axi_CONTROL_BUS_WSTRB);
    fetch_CONTROL_BUS_s_axi_U->ARVALID(s_axi_CONTROL_BUS_ARVALID);
    fetch_CONTROL_BUS_s_axi_U->ARREADY(s_axi_CONTROL_BUS_ARREADY);
    fetch_CONTROL_BUS_s_axi_U->ARADDR(s_axi_CONTROL_BUS_ARADDR);
    fetch_CONTROL_BUS_s_axi_U->RVALID(s_axi_CONTROL_BUS_RVALID);
    fetch_CONTROL_BUS_s_axi_U->RREADY(s_axi_CONTROL_BUS_RREADY);
    fetch_CONTROL_BUS_s_axi_U->RDATA(s_axi_CONTROL_BUS_RDATA);
    fetch_CONTROL_BUS_s_axi_U->RRESP(s_axi_CONTROL_BUS_RRESP);
    fetch_CONTROL_BUS_s_axi_U->BVALID(s_axi_CONTROL_BUS_BVALID);
    fetch_CONTROL_BUS_s_axi_U->BREADY(s_axi_CONTROL_BUS_BREADY);
    fetch_CONTROL_BUS_s_axi_U->BRESP(s_axi_CONTROL_BUS_BRESP);
    fetch_CONTROL_BUS_s_axi_U->ACLK(ap_clk);
    fetch_CONTROL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    fetch_CONTROL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    fetch_CONTROL_BUS_s_axi_U->insn_count(insn_count);
    fetch_CONTROL_BUS_s_axi_U->ap_start(ap_start);
    fetch_CONTROL_BUS_s_axi_U->interrupt(interrupt);
    fetch_CONTROL_BUS_s_axi_U->ap_ready(ap_ready);
    fetch_CONTROL_BUS_s_axi_U->ap_done(ap_done);
    fetch_CONTROL_BUS_s_axi_U->ap_idle(ap_idle);
    fetch_CONTROL_BUS_s_axi_U->insns_V(insns_V);
    fetch_ins_port_m_axi_U = new fetch_ins_port_m_axi<0,128,32,5,16,16,16,16,C_M_AXI_INS_PORT_ID_WIDTH,C_M_AXI_INS_PORT_ADDR_WIDTH,C_M_AXI_INS_PORT_DATA_WIDTH,C_M_AXI_INS_PORT_AWUSER_WIDTH,C_M_AXI_INS_PORT_ARUSER_WIDTH,C_M_AXI_INS_PORT_WUSER_WIDTH,C_M_AXI_INS_PORT_RUSER_WIDTH,C_M_AXI_INS_PORT_BUSER_WIDTH,C_M_AXI_INS_PORT_USER_VALUE,C_M_AXI_INS_PORT_PROT_VALUE,C_M_AXI_INS_PORT_CACHE_VALUE>("fetch_ins_port_m_axi_U");
    fetch_ins_port_m_axi_U->AWVALID(m_axi_ins_port_AWVALID);
    fetch_ins_port_m_axi_U->AWREADY(m_axi_ins_port_AWREADY);
    fetch_ins_port_m_axi_U->AWADDR(m_axi_ins_port_AWADDR);
    fetch_ins_port_m_axi_U->AWID(m_axi_ins_port_AWID);
    fetch_ins_port_m_axi_U->AWLEN(m_axi_ins_port_AWLEN);
    fetch_ins_port_m_axi_U->AWSIZE(m_axi_ins_port_AWSIZE);
    fetch_ins_port_m_axi_U->AWBURST(m_axi_ins_port_AWBURST);
    fetch_ins_port_m_axi_U->AWLOCK(m_axi_ins_port_AWLOCK);
    fetch_ins_port_m_axi_U->AWCACHE(m_axi_ins_port_AWCACHE);
    fetch_ins_port_m_axi_U->AWPROT(m_axi_ins_port_AWPROT);
    fetch_ins_port_m_axi_U->AWQOS(m_axi_ins_port_AWQOS);
    fetch_ins_port_m_axi_U->AWREGION(m_axi_ins_port_AWREGION);
    fetch_ins_port_m_axi_U->AWUSER(m_axi_ins_port_AWUSER);
    fetch_ins_port_m_axi_U->WVALID(m_axi_ins_port_WVALID);
    fetch_ins_port_m_axi_U->WREADY(m_axi_ins_port_WREADY);
    fetch_ins_port_m_axi_U->WDATA(m_axi_ins_port_WDATA);
    fetch_ins_port_m_axi_U->WSTRB(m_axi_ins_port_WSTRB);
    fetch_ins_port_m_axi_U->WLAST(m_axi_ins_port_WLAST);
    fetch_ins_port_m_axi_U->WID(m_axi_ins_port_WID);
    fetch_ins_port_m_axi_U->WUSER(m_axi_ins_port_WUSER);
    fetch_ins_port_m_axi_U->ARVALID(m_axi_ins_port_ARVALID);
    fetch_ins_port_m_axi_U->ARREADY(m_axi_ins_port_ARREADY);
    fetch_ins_port_m_axi_U->ARADDR(m_axi_ins_port_ARADDR);
    fetch_ins_port_m_axi_U->ARID(m_axi_ins_port_ARID);
    fetch_ins_port_m_axi_U->ARLEN(m_axi_ins_port_ARLEN);
    fetch_ins_port_m_axi_U->ARSIZE(m_axi_ins_port_ARSIZE);
    fetch_ins_port_m_axi_U->ARBURST(m_axi_ins_port_ARBURST);
    fetch_ins_port_m_axi_U->ARLOCK(m_axi_ins_port_ARLOCK);
    fetch_ins_port_m_axi_U->ARCACHE(m_axi_ins_port_ARCACHE);
    fetch_ins_port_m_axi_U->ARPROT(m_axi_ins_port_ARPROT);
    fetch_ins_port_m_axi_U->ARQOS(m_axi_ins_port_ARQOS);
    fetch_ins_port_m_axi_U->ARREGION(m_axi_ins_port_ARREGION);
    fetch_ins_port_m_axi_U->ARUSER(m_axi_ins_port_ARUSER);
    fetch_ins_port_m_axi_U->RVALID(m_axi_ins_port_RVALID);
    fetch_ins_port_m_axi_U->RREADY(m_axi_ins_port_RREADY);
    fetch_ins_port_m_axi_U->RDATA(m_axi_ins_port_RDATA);
    fetch_ins_port_m_axi_U->RLAST(m_axi_ins_port_RLAST);
    fetch_ins_port_m_axi_U->RID(m_axi_ins_port_RID);
    fetch_ins_port_m_axi_U->RUSER(m_axi_ins_port_RUSER);
    fetch_ins_port_m_axi_U->RRESP(m_axi_ins_port_RRESP);
    fetch_ins_port_m_axi_U->BVALID(m_axi_ins_port_BVALID);
    fetch_ins_port_m_axi_U->BREADY(m_axi_ins_port_BREADY);
    fetch_ins_port_m_axi_U->BRESP(m_axi_ins_port_BRESP);
    fetch_ins_port_m_axi_U->BID(m_axi_ins_port_BID);
    fetch_ins_port_m_axi_U->BUSER(m_axi_ins_port_BUSER);
    fetch_ins_port_m_axi_U->ACLK(ap_clk);
    fetch_ins_port_m_axi_U->ARESET(ap_rst_n_inv);
    fetch_ins_port_m_axi_U->ACLK_EN(ap_var_for_const0);
    fetch_ins_port_m_axi_U->I_ARVALID(ins_port_ARVALID);
    fetch_ins_port_m_axi_U->I_ARREADY(ins_port_ARREADY);
    fetch_ins_port_m_axi_U->I_ARADDR(ins_port_ARADDR);
    fetch_ins_port_m_axi_U->I_ARID(ap_var_for_const1);
    fetch_ins_port_m_axi_U->I_ARLEN(insn_count_read_reg_223);
    fetch_ins_port_m_axi_U->I_ARSIZE(ap_var_for_const2);
    fetch_ins_port_m_axi_U->I_ARLOCK(ap_var_for_const3);
    fetch_ins_port_m_axi_U->I_ARCACHE(ap_var_for_const4);
    fetch_ins_port_m_axi_U->I_ARQOS(ap_var_for_const4);
    fetch_ins_port_m_axi_U->I_ARPROT(ap_var_for_const2);
    fetch_ins_port_m_axi_U->I_ARUSER(ap_var_for_const1);
    fetch_ins_port_m_axi_U->I_ARBURST(ap_var_for_const3);
    fetch_ins_port_m_axi_U->I_ARREGION(ap_var_for_const4);
    fetch_ins_port_m_axi_U->I_RVALID(ins_port_RVALID);
    fetch_ins_port_m_axi_U->I_RREADY(ins_port_RREADY);
    fetch_ins_port_m_axi_U->I_RDATA(ins_port_RDATA);
    fetch_ins_port_m_axi_U->I_RID(ins_port_RID);
    fetch_ins_port_m_axi_U->I_RUSER(ins_port_RUSER);
    fetch_ins_port_m_axi_U->I_RRESP(ins_port_RRESP);
    fetch_ins_port_m_axi_U->I_RLAST(ins_port_RLAST);
    fetch_ins_port_m_axi_U->I_AWVALID(ap_var_for_const5);
    fetch_ins_port_m_axi_U->I_AWREADY(ins_port_AWREADY);
    fetch_ins_port_m_axi_U->I_AWADDR(ap_var_for_const6);
    fetch_ins_port_m_axi_U->I_AWID(ap_var_for_const1);
    fetch_ins_port_m_axi_U->I_AWLEN(ap_var_for_const6);
    fetch_ins_port_m_axi_U->I_AWSIZE(ap_var_for_const2);
    fetch_ins_port_m_axi_U->I_AWLOCK(ap_var_for_const3);
    fetch_ins_port_m_axi_U->I_AWCACHE(ap_var_for_const4);
    fetch_ins_port_m_axi_U->I_AWQOS(ap_var_for_const4);
    fetch_ins_port_m_axi_U->I_AWPROT(ap_var_for_const2);
    fetch_ins_port_m_axi_U->I_AWUSER(ap_var_for_const1);
    fetch_ins_port_m_axi_U->I_AWBURST(ap_var_for_const3);
    fetch_ins_port_m_axi_U->I_AWREGION(ap_var_for_const4);
    fetch_ins_port_m_axi_U->I_WVALID(ap_var_for_const5);
    fetch_ins_port_m_axi_U->I_WREADY(ins_port_WREADY);
    fetch_ins_port_m_axi_U->I_WDATA(ap_var_for_const7);
    fetch_ins_port_m_axi_U->I_WID(ap_var_for_const1);
    fetch_ins_port_m_axi_U->I_WUSER(ap_var_for_const1);
    fetch_ins_port_m_axi_U->I_WLAST(ap_var_for_const5);
    fetch_ins_port_m_axi_U->I_WSTRB(ap_var_for_const8);
    fetch_ins_port_m_axi_U->I_BVALID(ins_port_BVALID);
    fetch_ins_port_m_axi_U->I_BREADY(ap_var_for_const5);
    fetch_ins_port_m_axi_U->I_BRESP(ins_port_BRESP);
    fetch_ins_port_m_axi_U->I_BID(ins_port_BID);
    fetch_ins_port_m_axi_U->I_BUSER(ins_port_BUSER);
    regslice_both_load_queue_V_V_U = new regslice_both<128>("regslice_both_load_queue_V_V_U");
    regslice_both_load_queue_V_V_U->ap_clk(ap_clk);
    regslice_both_load_queue_V_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_load_queue_V_V_U->data_in(raw_insn_reg_249_pp0_iter2_reg);
    regslice_both_load_queue_V_V_U->vld_in(load_queue_V_V_TVALID_int);
    regslice_both_load_queue_V_V_U->ack_in(load_queue_V_V_TREADY_int);
    regslice_both_load_queue_V_V_U->data_out(load_queue_V_V_TDATA);
    regslice_both_load_queue_V_V_U->vld_out(regslice_both_load_queue_V_V_U_vld_out);
    regslice_both_load_queue_V_V_U->ack_out(load_queue_V_V_TREADY);
    regslice_both_load_queue_V_V_U->apdone_blk(regslice_both_load_queue_V_V_U_apdone_blk);
    regslice_both_gemm_queue_V_V_U = new regslice_both<128>("regslice_both_gemm_queue_V_V_U");
    regslice_both_gemm_queue_V_V_U->ap_clk(ap_clk);
    regslice_both_gemm_queue_V_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_gemm_queue_V_V_U->data_in(raw_insn_reg_249_pp0_iter2_reg);
    regslice_both_gemm_queue_V_V_U->vld_in(gemm_queue_V_V_TVALID_int);
    regslice_both_gemm_queue_V_V_U->ack_in(gemm_queue_V_V_TREADY_int);
    regslice_both_gemm_queue_V_V_U->data_out(gemm_queue_V_V_TDATA);
    regslice_both_gemm_queue_V_V_U->vld_out(regslice_both_gemm_queue_V_V_U_vld_out);
    regslice_both_gemm_queue_V_V_U->ack_out(gemm_queue_V_V_TREADY);
    regslice_both_gemm_queue_V_V_U->apdone_blk(regslice_both_gemm_queue_V_V_U_apdone_blk);
    regslice_both_store_queue_V_V_U = new regslice_both<128>("regslice_both_store_queue_V_V_U");
    regslice_both_store_queue_V_V_U->ap_clk(ap_clk);
    regslice_both_store_queue_V_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_store_queue_V_V_U->data_in(raw_insn_reg_249_pp0_iter2_reg);
    regslice_both_store_queue_V_V_U->vld_in(store_queue_V_V_TVALID_int);
    regslice_both_store_queue_V_V_U->ack_in(store_queue_V_V_TREADY_int);
    regslice_both_store_queue_V_V_U->data_out(store_queue_V_V_TDATA);
    regslice_both_store_queue_V_V_U->vld_out(regslice_both_store_queue_V_V_U_vld_out);
    regslice_both_store_queue_V_V_U->ack_out(store_queue_V_V_TREADY);
    regslice_both_store_queue_V_V_U->apdone_blk(regslice_both_store_queue_V_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln158_fu_202_p2);
    sensitive << ( memory_type_V_reg_262 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ins_port_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ins_port_RVALID );
    sensitive << ( ap_block_state12_io );
    sensitive << ( ap_block_state13_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ins_port_RVALID );
    sensitive << ( ap_block_state12_io );
    sensitive << ( ap_block_state13_io );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( ins_port_RVALID );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state12_io);
    sensitive << ( icmp_ln879_reg_267 );
    sensitive << ( ap_predicate_op56_write_state12 );
    sensitive << ( ap_predicate_op57_write_state12 );
    sensitive << ( ap_predicate_op58_write_state12 );
    sensitive << ( load_queue_V_V_TREADY_int );
    sensitive << ( gemm_queue_V_V_TREADY_int );
    sensitive << ( store_queue_V_V_TREADY_int );

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state13_io);
    sensitive << ( icmp_ln879_reg_267_pp0_iter3_reg );
    sensitive << ( ap_predicate_op63_write_state13 );
    sensitive << ( ap_predicate_op65_write_state13 );
    sensitive << ( ap_predicate_op67_write_state13 );
    sensitive << ( load_queue_V_V_TREADY_int );
    sensitive << ( gemm_queue_V_V_TREADY_int );
    sensitive << ( store_queue_V_V_TREADY_int );

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state14);
    sensitive << ( regslice_both_load_queue_V_V_U_apdone_blk );
    sensitive << ( regslice_both_gemm_queue_V_V_U_apdone_blk );
    sensitive << ( regslice_both_store_queue_V_V_U_apdone_blk );

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( icmp_ln145_fu_167_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( regslice_both_load_queue_V_V_U_apdone_blk );
    sensitive << ( regslice_both_gemm_queue_V_V_U_apdone_blk );
    sensitive << ( regslice_both_store_queue_V_V_U_apdone_blk );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_predicate_op56_write_state12);
    sensitive << ( icmp_ln879_reg_267 );
    sensitive << ( icmp_ln879_1_reg_271 );

    SC_METHOD(thread_ap_predicate_op57_write_state12);
    sensitive << ( icmp_ln879_reg_267 );
    sensitive << ( icmp_ln879_1_reg_271 );
    sensitive << ( icmp_ln158_reg_275 );

    SC_METHOD(thread_ap_predicate_op58_write_state12);
    sensitive << ( icmp_ln879_reg_267 );
    sensitive << ( icmp_ln879_1_reg_271 );
    sensitive << ( icmp_ln158_reg_275 );

    SC_METHOD(thread_ap_predicate_op63_write_state13);
    sensitive << ( icmp_ln879_reg_267_pp0_iter3_reg );
    sensitive << ( icmp_ln879_1_reg_271_pp0_iter3_reg );

    SC_METHOD(thread_ap_predicate_op65_write_state13);
    sensitive << ( icmp_ln879_reg_267_pp0_iter3_reg );
    sensitive << ( icmp_ln879_1_reg_271_pp0_iter3_reg );
    sensitive << ( icmp_ln158_reg_275_pp0_iter3_reg );

    SC_METHOD(thread_ap_predicate_op67_write_state13);
    sensitive << ( icmp_ln879_reg_267_pp0_iter3_reg );
    sensitive << ( icmp_ln879_1_reg_271_pp0_iter3_reg );
    sensitive << ( icmp_ln158_reg_275_pp0_iter3_reg );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( regslice_both_load_queue_V_V_U_apdone_blk );
    sensitive << ( regslice_both_gemm_queue_V_V_U_apdone_blk );
    sensitive << ( regslice_both_store_queue_V_V_U_apdone_blk );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_empty_fu_157_p1);
    sensitive << ( insns_V1_reg_229 );

    SC_METHOD(thread_gemm_queue_V_V_TDATA_blk_n);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( icmp_ln879_reg_267 );
    sensitive << ( icmp_ln879_1_reg_271 );
    sensitive << ( icmp_ln158_reg_275 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln879_reg_267_pp0_iter3_reg );
    sensitive << ( icmp_ln879_1_reg_271_pp0_iter3_reg );
    sensitive << ( icmp_ln158_reg_275_pp0_iter3_reg );
    sensitive << ( gemm_queue_V_V_TREADY_int );

    SC_METHOD(thread_gemm_queue_V_V_TVALID);
    sensitive << ( regslice_both_gemm_queue_V_V_U_vld_out );

    SC_METHOD(thread_gemm_queue_V_V_TVALID_int);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_predicate_op56_write_state12 );
    sensitive << ( ap_predicate_op57_write_state12 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln145_fu_167_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( pc_0_reg_136 );
    sensitive << ( insn_count_read_reg_223 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln158_fu_217_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln879_fu_192_p2 );
    sensitive << ( icmp_ln879_1_fu_197_p2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_fu_207_p4 );

    SC_METHOD(thread_icmp_ln879_1_fu_197_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( opcode_V_reg_256 );
    sensitive << ( icmp_ln879_fu_192_p2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_icmp_ln879_fu_192_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( opcode_V_reg_256 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ins_port_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ins_port_ARREADY );
    sensitive << ( empty_fu_157_p1 );

    SC_METHOD(thread_ins_port_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ins_port_ARREADY );

    SC_METHOD(thread_ins_port_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ins_port_blk_n_AR);
    sensitive << ( m_axi_ins_port_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ins_port_blk_n_R);
    sensitive << ( m_axi_ins_port_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_load_queue_V_V_TDATA_blk_n);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( icmp_ln879_reg_267 );
    sensitive << ( icmp_ln879_1_reg_271 );
    sensitive << ( icmp_ln158_reg_275 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln879_reg_267_pp0_iter3_reg );
    sensitive << ( icmp_ln879_1_reg_271_pp0_iter3_reg );
    sensitive << ( icmp_ln158_reg_275_pp0_iter3_reg );
    sensitive << ( load_queue_V_V_TREADY_int );

    SC_METHOD(thread_load_queue_V_V_TVALID);
    sensitive << ( regslice_both_load_queue_V_V_U_vld_out );

    SC_METHOD(thread_load_queue_V_V_TVALID_int);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_predicate_op58_write_state12 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_opcode_V_fu_178_p1);
    sensitive << ( ins_port_RDATA );

    SC_METHOD(thread_pc_fu_172_p2);
    sensitive << ( pc_0_reg_136 );

    SC_METHOD(thread_store_queue_V_V_TDATA_blk_n);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( icmp_ln879_reg_267 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( icmp_ln879_reg_267_pp0_iter3_reg );
    sensitive << ( store_queue_V_V_TREADY_int );

    SC_METHOD(thread_store_queue_V_V_TVALID);
    sensitive << ( regslice_both_store_queue_V_V_U_vld_out );

    SC_METHOD(thread_store_queue_V_V_TVALID_int);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( icmp_ln879_reg_267 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_fu_207_p4);
    sensitive << ( add_ln158_fu_202_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ins_port_ARREADY );
    sensitive << ( icmp_ln145_fu_167_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( regslice_both_load_queue_V_V_U_apdone_blk );
    sensitive << ( regslice_both_gemm_queue_V_V_U_apdone_blk );
    sensitive << ( regslice_both_store_queue_V_V_U_apdone_blk );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const8);

    ap_CS_fsm = "0000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fetch_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_ins_port_AWVALID, "(port)m_axi_ins_port_AWVALID");
    sc_trace(mVcdFile, m_axi_ins_port_AWREADY, "(port)m_axi_ins_port_AWREADY");
    sc_trace(mVcdFile, m_axi_ins_port_AWADDR, "(port)m_axi_ins_port_AWADDR");
    sc_trace(mVcdFile, m_axi_ins_port_AWID, "(port)m_axi_ins_port_AWID");
    sc_trace(mVcdFile, m_axi_ins_port_AWLEN, "(port)m_axi_ins_port_AWLEN");
    sc_trace(mVcdFile, m_axi_ins_port_AWSIZE, "(port)m_axi_ins_port_AWSIZE");
    sc_trace(mVcdFile, m_axi_ins_port_AWBURST, "(port)m_axi_ins_port_AWBURST");
    sc_trace(mVcdFile, m_axi_ins_port_AWLOCK, "(port)m_axi_ins_port_AWLOCK");
    sc_trace(mVcdFile, m_axi_ins_port_AWCACHE, "(port)m_axi_ins_port_AWCACHE");
    sc_trace(mVcdFile, m_axi_ins_port_AWPROT, "(port)m_axi_ins_port_AWPROT");
    sc_trace(mVcdFile, m_axi_ins_port_AWQOS, "(port)m_axi_ins_port_AWQOS");
    sc_trace(mVcdFile, m_axi_ins_port_AWREGION, "(port)m_axi_ins_port_AWREGION");
    sc_trace(mVcdFile, m_axi_ins_port_AWUSER, "(port)m_axi_ins_port_AWUSER");
    sc_trace(mVcdFile, m_axi_ins_port_WVALID, "(port)m_axi_ins_port_WVALID");
    sc_trace(mVcdFile, m_axi_ins_port_WREADY, "(port)m_axi_ins_port_WREADY");
    sc_trace(mVcdFile, m_axi_ins_port_WDATA, "(port)m_axi_ins_port_WDATA");
    sc_trace(mVcdFile, m_axi_ins_port_WSTRB, "(port)m_axi_ins_port_WSTRB");
    sc_trace(mVcdFile, m_axi_ins_port_WLAST, "(port)m_axi_ins_port_WLAST");
    sc_trace(mVcdFile, m_axi_ins_port_WID, "(port)m_axi_ins_port_WID");
    sc_trace(mVcdFile, m_axi_ins_port_WUSER, "(port)m_axi_ins_port_WUSER");
    sc_trace(mVcdFile, m_axi_ins_port_ARVALID, "(port)m_axi_ins_port_ARVALID");
    sc_trace(mVcdFile, m_axi_ins_port_ARREADY, "(port)m_axi_ins_port_ARREADY");
    sc_trace(mVcdFile, m_axi_ins_port_ARADDR, "(port)m_axi_ins_port_ARADDR");
    sc_trace(mVcdFile, m_axi_ins_port_ARID, "(port)m_axi_ins_port_ARID");
    sc_trace(mVcdFile, m_axi_ins_port_ARLEN, "(port)m_axi_ins_port_ARLEN");
    sc_trace(mVcdFile, m_axi_ins_port_ARSIZE, "(port)m_axi_ins_port_ARSIZE");
    sc_trace(mVcdFile, m_axi_ins_port_ARBURST, "(port)m_axi_ins_port_ARBURST");
    sc_trace(mVcdFile, m_axi_ins_port_ARLOCK, "(port)m_axi_ins_port_ARLOCK");
    sc_trace(mVcdFile, m_axi_ins_port_ARCACHE, "(port)m_axi_ins_port_ARCACHE");
    sc_trace(mVcdFile, m_axi_ins_port_ARPROT, "(port)m_axi_ins_port_ARPROT");
    sc_trace(mVcdFile, m_axi_ins_port_ARQOS, "(port)m_axi_ins_port_ARQOS");
    sc_trace(mVcdFile, m_axi_ins_port_ARREGION, "(port)m_axi_ins_port_ARREGION");
    sc_trace(mVcdFile, m_axi_ins_port_ARUSER, "(port)m_axi_ins_port_ARUSER");
    sc_trace(mVcdFile, m_axi_ins_port_RVALID, "(port)m_axi_ins_port_RVALID");
    sc_trace(mVcdFile, m_axi_ins_port_RREADY, "(port)m_axi_ins_port_RREADY");
    sc_trace(mVcdFile, m_axi_ins_port_RDATA, "(port)m_axi_ins_port_RDATA");
    sc_trace(mVcdFile, m_axi_ins_port_RLAST, "(port)m_axi_ins_port_RLAST");
    sc_trace(mVcdFile, m_axi_ins_port_RID, "(port)m_axi_ins_port_RID");
    sc_trace(mVcdFile, m_axi_ins_port_RUSER, "(port)m_axi_ins_port_RUSER");
    sc_trace(mVcdFile, m_axi_ins_port_RRESP, "(port)m_axi_ins_port_RRESP");
    sc_trace(mVcdFile, m_axi_ins_port_BVALID, "(port)m_axi_ins_port_BVALID");
    sc_trace(mVcdFile, m_axi_ins_port_BREADY, "(port)m_axi_ins_port_BREADY");
    sc_trace(mVcdFile, m_axi_ins_port_BRESP, "(port)m_axi_ins_port_BRESP");
    sc_trace(mVcdFile, m_axi_ins_port_BID, "(port)m_axi_ins_port_BID");
    sc_trace(mVcdFile, m_axi_ins_port_BUSER, "(port)m_axi_ins_port_BUSER");
    sc_trace(mVcdFile, load_queue_V_V_TDATA, "(port)load_queue_V_V_TDATA");
    sc_trace(mVcdFile, load_queue_V_V_TVALID, "(port)load_queue_V_V_TVALID");
    sc_trace(mVcdFile, load_queue_V_V_TREADY, "(port)load_queue_V_V_TREADY");
    sc_trace(mVcdFile, gemm_queue_V_V_TDATA, "(port)gemm_queue_V_V_TDATA");
    sc_trace(mVcdFile, gemm_queue_V_V_TVALID, "(port)gemm_queue_V_V_TVALID");
    sc_trace(mVcdFile, gemm_queue_V_V_TREADY, "(port)gemm_queue_V_V_TREADY");
    sc_trace(mVcdFile, store_queue_V_V_TDATA, "(port)store_queue_V_V_TDATA");
    sc_trace(mVcdFile, store_queue_V_V_TVALID, "(port)store_queue_V_V_TVALID");
    sc_trace(mVcdFile, store_queue_V_V_TREADY, "(port)store_queue_V_V_TREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWVALID, "(port)s_axi_CONTROL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWREADY, "(port)s_axi_CONTROL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWADDR, "(port)s_axi_CONTROL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WVALID, "(port)s_axi_CONTROL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WREADY, "(port)s_axi_CONTROL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WDATA, "(port)s_axi_CONTROL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WSTRB, "(port)s_axi_CONTROL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARVALID, "(port)s_axi_CONTROL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARREADY, "(port)s_axi_CONTROL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARADDR, "(port)s_axi_CONTROL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RVALID, "(port)s_axi_CONTROL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RREADY, "(port)s_axi_CONTROL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RDATA, "(port)s_axi_CONTROL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RRESP, "(port)s_axi_CONTROL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BVALID, "(port)s_axi_CONTROL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BREADY, "(port)s_axi_CONTROL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BRESP, "(port)s_axi_CONTROL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, insn_count, "insn_count");
    sc_trace(mVcdFile, insns_V, "insns_V");
    sc_trace(mVcdFile, ins_port_blk_n_AR, "ins_port_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ins_port_blk_n_R, "ins_port_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, load_queue_V_V_TDATA_blk_n, "load_queue_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, icmp_ln879_reg_267, "icmp_ln879_reg_267");
    sc_trace(mVcdFile, icmp_ln879_1_reg_271, "icmp_ln879_1_reg_271");
    sc_trace(mVcdFile, icmp_ln158_reg_275, "icmp_ln158_reg_275");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, icmp_ln879_reg_267_pp0_iter3_reg, "icmp_ln879_reg_267_pp0_iter3_reg");
    sc_trace(mVcdFile, icmp_ln879_1_reg_271_pp0_iter3_reg, "icmp_ln879_1_reg_271_pp0_iter3_reg");
    sc_trace(mVcdFile, icmp_ln158_reg_275_pp0_iter3_reg, "icmp_ln158_reg_275_pp0_iter3_reg");
    sc_trace(mVcdFile, gemm_queue_V_V_TDATA_blk_n, "gemm_queue_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, store_queue_V_V_TDATA_blk_n, "store_queue_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ins_port_AWREADY, "ins_port_AWREADY");
    sc_trace(mVcdFile, ins_port_WREADY, "ins_port_WREADY");
    sc_trace(mVcdFile, ins_port_ARVALID, "ins_port_ARVALID");
    sc_trace(mVcdFile, ins_port_ARREADY, "ins_port_ARREADY");
    sc_trace(mVcdFile, ins_port_ARADDR, "ins_port_ARADDR");
    sc_trace(mVcdFile, ins_port_RVALID, "ins_port_RVALID");
    sc_trace(mVcdFile, ins_port_RREADY, "ins_port_RREADY");
    sc_trace(mVcdFile, ins_port_RDATA, "ins_port_RDATA");
    sc_trace(mVcdFile, ins_port_RLAST, "ins_port_RLAST");
    sc_trace(mVcdFile, ins_port_RID, "ins_port_RID");
    sc_trace(mVcdFile, ins_port_RUSER, "ins_port_RUSER");
    sc_trace(mVcdFile, ins_port_RRESP, "ins_port_RRESP");
    sc_trace(mVcdFile, ins_port_BVALID, "ins_port_BVALID");
    sc_trace(mVcdFile, ins_port_BRESP, "ins_port_BRESP");
    sc_trace(mVcdFile, ins_port_BID, "ins_port_BID");
    sc_trace(mVcdFile, ins_port_BUSER, "ins_port_BUSER");
    sc_trace(mVcdFile, pc_0_reg_136, "pc_0_reg_136");
    sc_trace(mVcdFile, insn_count_read_reg_223, "insn_count_read_reg_223");
    sc_trace(mVcdFile, insns_V1_reg_229, "insns_V1_reg_229");
    sc_trace(mVcdFile, icmp_ln145_fu_167_p2, "icmp_ln145_fu_167_p2");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter3, "ap_block_state12_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_predicate_op56_write_state12, "ap_predicate_op56_write_state12");
    sc_trace(mVcdFile, ap_predicate_op57_write_state12, "ap_predicate_op57_write_state12");
    sc_trace(mVcdFile, ap_predicate_op58_write_state12, "ap_predicate_op58_write_state12");
    sc_trace(mVcdFile, ap_block_state12_io, "ap_block_state12_io");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter4, "ap_block_state13_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_predicate_op63_write_state13, "ap_predicate_op63_write_state13");
    sc_trace(mVcdFile, ap_predicate_op65_write_state13, "ap_predicate_op65_write_state13");
    sc_trace(mVcdFile, ap_predicate_op67_write_state13, "ap_predicate_op67_write_state13");
    sc_trace(mVcdFile, ap_block_state13_io, "ap_block_state13_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, pc_fu_172_p2, "pc_fu_172_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, raw_insn_reg_249, "raw_insn_reg_249");
    sc_trace(mVcdFile, raw_insn_reg_249_pp0_iter2_reg, "raw_insn_reg_249_pp0_iter2_reg");
    sc_trace(mVcdFile, opcode_V_fu_178_p1, "opcode_V_fu_178_p1");
    sc_trace(mVcdFile, opcode_V_reg_256, "opcode_V_reg_256");
    sc_trace(mVcdFile, memory_type_V_reg_262, "memory_type_V_reg_262");
    sc_trace(mVcdFile, icmp_ln879_fu_192_p2, "icmp_ln879_fu_192_p2");
    sc_trace(mVcdFile, icmp_ln879_1_fu_197_p2, "icmp_ln879_1_fu_197_p2");
    sc_trace(mVcdFile, icmp_ln158_fu_217_p2, "icmp_ln158_fu_217_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, empty_fu_157_p1, "empty_fu_157_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, add_ln158_fu_202_p2, "add_ln158_fu_202_p2");
    sc_trace(mVcdFile, tmp_fu_207_p4, "tmp_fu_207_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, regslice_both_load_queue_V_V_U_apdone_blk, "regslice_both_load_queue_V_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_gemm_queue_V_V_U_apdone_blk, "regslice_both_gemm_queue_V_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_store_queue_V_V_U_apdone_blk, "regslice_both_store_queue_V_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state14, "ap_block_state14");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, load_queue_V_V_TVALID_int, "load_queue_V_V_TVALID_int");
    sc_trace(mVcdFile, load_queue_V_V_TREADY_int, "load_queue_V_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_load_queue_V_V_U_vld_out, "regslice_both_load_queue_V_V_U_vld_out");
    sc_trace(mVcdFile, gemm_queue_V_V_TVALID_int, "gemm_queue_V_V_TVALID_int");
    sc_trace(mVcdFile, gemm_queue_V_V_TREADY_int, "gemm_queue_V_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_gemm_queue_V_V_U_vld_out, "regslice_both_gemm_queue_V_V_U_vld_out");
    sc_trace(mVcdFile, store_queue_V_V_TVALID_int, "store_queue_V_V_TVALID_int");
    sc_trace(mVcdFile, store_queue_V_V_TREADY_int, "store_queue_V_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_store_queue_V_V_U_vld_out, "regslice_both_store_queue_V_V_U_vld_out");
#endif

    }
    mHdltvinHandle.open("fetch.hdltvin.dat");
    mHdltvoutHandle.open("fetch.hdltvout.dat");
}

fetch::~fetch() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fetch_CONTROL_BUS_s_axi_U;
    delete fetch_ins_port_m_axi_U;
    delete regslice_both_load_queue_V_V_U;
    delete regslice_both_gemm_queue_V_V_U;
    delete regslice_both_store_queue_V_V_U;
}

void fetch::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fetch::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_logic_0;
}

void fetch::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv32_0;
}

void fetch::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void fetch::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv3_0;
}

void fetch::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void fetch::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv4_0;
}

void fetch::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv128_lc_1;
}

void fetch::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv16_0;
}

void fetch::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter4 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln145_fu_167_p2.read()))) {
        pc_0_reg_136 = pc_fu_172_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        pc_0_reg_136 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_192_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_fu_197_p2.read()))) {
        icmp_ln158_reg_275 = icmp_ln158_fu_217_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln158_reg_275_pp0_iter3_reg = icmp_ln158_reg_275.read();
        icmp_ln879_1_reg_271_pp0_iter3_reg = icmp_ln879_1_reg_271.read();
        icmp_ln879_reg_267 = icmp_ln879_fu_192_p2.read();
        icmp_ln879_reg_267_pp0_iter3_reg = icmp_ln879_reg_267.read();
        raw_insn_reg_249_pp0_iter2_reg = raw_insn_reg_249.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_192_p2.read()))) {
        icmp_ln879_1_reg_271 = icmp_ln879_1_fu_197_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        insn_count_read_reg_223 = insn_count.read();
        insns_V1_reg_229 = insns_V.read().range(31, 4);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        memory_type_V_reg_262 = ins_port_RDATA.read().range(9, 7);
        opcode_V_reg_256 = opcode_V_fu_178_p1.read();
        raw_insn_reg_249 = ins_port_RDATA.read();
    }
}

void fetch::thread_add_ln158_fu_202_p2() {
    add_ln158_fu_202_p2 = (!memory_type_V_reg_262.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<3>(): (sc_biguint<3>(memory_type_V_reg_262.read()) + sc_bigint<3>(ap_const_lv3_7));
}

void fetch::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void fetch::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fetch::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[9];
}

void fetch::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fetch::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fetch::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fetch::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ins_port_RVALID.read()));
}

void fetch::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ins_port_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state12_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read())));
}

void fetch::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ins_port_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state12_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read())));
}

void fetch::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = esl_seteq<1,1,1>(ap_const_logic_0, ins_port_RVALID.read());
}

void fetch::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fetch::thread_ap_block_state12_io() {
    ap_block_state12_io = ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op58_write_state12.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, load_queue_V_V_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op56_write_state12.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gemm_queue_V_V_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op57_write_state12.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gemm_queue_V_V_TREADY_int.read())) || (esl_seteq<1,1,1>(icmp_ln879_reg_267.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, store_queue_V_V_TREADY_int.read())));
}

void fetch::thread_ap_block_state12_pp0_stage0_iter3() {
    ap_block_state12_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fetch::thread_ap_block_state13_io() {
    ap_block_state13_io = ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op67_write_state13.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, load_queue_V_V_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op63_write_state13.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gemm_queue_V_V_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op65_write_state13.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gemm_queue_V_V_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_267_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, store_queue_V_V_TREADY_int.read())));
}

void fetch::thread_ap_block_state13_pp0_stage0_iter4() {
    ap_block_state13_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fetch::thread_ap_block_state14() {
    ap_block_state14 = (esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_load_queue_V_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_gemm_queue_V_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_store_queue_V_V_U_apdone_blk.read()));
}

void fetch::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fetch::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln145_fu_167_p2.read())) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void fetch::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_load_queue_V_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_gemm_queue_V_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_store_queue_V_V_U_apdone_blk.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fetch::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void fetch::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fetch::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void fetch::thread_ap_predicate_op56_write_state12() {
    ap_predicate_op56_write_state12 = (esl_seteq<1,1,1>(icmp_ln879_reg_267.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_1_reg_271.read()));
}

void fetch::thread_ap_predicate_op57_write_state12() {
    ap_predicate_op57_write_state12 = (esl_seteq<1,1,1>(icmp_ln879_reg_267.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln879_1_reg_271.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln158_reg_275.read()));
}

void fetch::thread_ap_predicate_op58_write_state12() {
    ap_predicate_op58_write_state12 = (esl_seteq<1,1,1>(icmp_ln879_reg_267.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln879_1_reg_271.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln158_reg_275.read()));
}

void fetch::thread_ap_predicate_op63_write_state13() {
    ap_predicate_op63_write_state13 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_reg_267_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_1_reg_271_pp0_iter3_reg.read()));
}

void fetch::thread_ap_predicate_op65_write_state13() {
    ap_predicate_op65_write_state13 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_reg_267_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_reg_271_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln158_reg_275_pp0_iter3_reg.read()));
}

void fetch::thread_ap_predicate_op67_write_state13() {
    ap_predicate_op67_write_state13 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_reg_267_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_reg_271_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln158_reg_275_pp0_iter3_reg.read()));
}

void fetch::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_load_queue_V_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_gemm_queue_V_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_store_queue_V_V_U_apdone_blk.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fetch::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fetch::thread_empty_fu_157_p1() {
    empty_fu_157_p1 = esl_zext<64,28>(insns_V1_reg_229.read());
}

void fetch::thread_gemm_queue_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(icmp_ln879_reg_267.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(icmp_ln879_1_reg_271.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln158_reg_275.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_reg_267_pp0_iter3_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_reg_271_pp0_iter3_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln158_reg_275_pp0_iter3_reg.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(icmp_ln879_reg_267.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_1_reg_271.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_reg_267_pp0_iter3_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_1_reg_271_pp0_iter3_reg.read())))) {
        gemm_queue_V_V_TDATA_blk_n = gemm_queue_V_V_TREADY_int.read();
    } else {
        gemm_queue_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void fetch::thread_gemm_queue_V_V_TVALID() {
    gemm_queue_V_V_TVALID = regslice_both_gemm_queue_V_V_U_vld_out.read();
}

void fetch::thread_gemm_queue_V_V_TVALID_int() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op56_write_state12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op57_write_state12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        gemm_queue_V_V_TVALID_int = ap_const_logic_1;
    } else {
        gemm_queue_V_V_TVALID_int = ap_const_logic_0;
    }
}

void fetch::thread_icmp_ln145_fu_167_p2() {
    icmp_ln145_fu_167_p2 = (!pc_0_reg_136.read().is_01() || !insn_count_read_reg_223.read().is_01())? sc_lv<1>(): sc_lv<1>(pc_0_reg_136.read() == insn_count_read_reg_223.read());
}

void fetch::thread_icmp_ln158_fu_217_p2() {
    icmp_ln158_fu_217_p2 = (!tmp_fu_207_p4.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_207_p4.read() == ap_const_lv2_0);
}

void fetch::thread_icmp_ln879_1_fu_197_p2() {
    icmp_ln879_1_fu_197_p2 = (!opcode_V_reg_256.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(opcode_V_reg_256.read() == ap_const_lv3_0);
}

void fetch::thread_icmp_ln879_fu_192_p2() {
    icmp_ln879_fu_192_p2 = (!opcode_V_reg_256.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<1>(): sc_lv<1>(opcode_V_reg_256.read() == ap_const_lv3_1);
}

void fetch::thread_ins_port_ARADDR() {
    ins_port_ARADDR =  (sc_lv<32>) (empty_fu_157_p1.read());
}

void fetch::thread_ins_port_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ins_port_ARREADY.read(), ap_const_logic_1))) {
        ins_port_ARVALID = ap_const_logic_1;
    } else {
        ins_port_ARVALID = ap_const_logic_0;
    }
}

void fetch::thread_ins_port_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ins_port_RREADY = ap_const_logic_1;
    } else {
        ins_port_RREADY = ap_const_logic_0;
    }
}

void fetch::thread_ins_port_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ins_port_blk_n_AR = m_axi_ins_port_ARREADY.read();
    } else {
        ins_port_blk_n_AR = ap_const_logic_1;
    }
}

void fetch::thread_ins_port_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ins_port_blk_n_R = m_axi_ins_port_RVALID.read();
    } else {
        ins_port_blk_n_R = ap_const_logic_1;
    }
}

void fetch::thread_load_queue_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(icmp_ln879_reg_267.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(icmp_ln879_1_reg_271.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln158_reg_275.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_reg_267_pp0_iter3_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_reg_271_pp0_iter3_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln158_reg_275_pp0_iter3_reg.read())))) {
        load_queue_V_V_TDATA_blk_n = load_queue_V_V_TREADY_int.read();
    } else {
        load_queue_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void fetch::thread_load_queue_V_V_TVALID() {
    load_queue_V_V_TVALID = regslice_both_load_queue_V_V_U_vld_out.read();
}

void fetch::thread_load_queue_V_V_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op58_write_state12.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        load_queue_V_V_TVALID_int = ap_const_logic_1;
    } else {
        load_queue_V_V_TVALID_int = ap_const_logic_0;
    }
}

void fetch::thread_opcode_V_fu_178_p1() {
    opcode_V_fu_178_p1 = ins_port_RDATA.read().range(3-1, 0);
}

void fetch::thread_pc_fu_172_p2() {
    pc_fu_172_p2 = (!pc_0_reg_136.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(pc_0_reg_136.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void fetch::thread_store_queue_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(icmp_ln879_reg_267.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_267_pp0_iter3_reg.read())))) {
        store_queue_V_V_TDATA_blk_n = store_queue_V_V_TREADY_int.read();
    } else {
        store_queue_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void fetch::thread_store_queue_V_V_TVALID() {
    store_queue_V_V_TVALID = regslice_both_store_queue_V_V_U_vld_out.read();
}

void fetch::thread_store_queue_V_V_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(icmp_ln879_reg_267.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        store_queue_V_V_TVALID_int = ap_const_logic_1;
    } else {
        store_queue_V_V_TVALID_int = ap_const_logic_0;
    }
}

void fetch::thread_tmp_fu_207_p4() {
    tmp_fu_207_p4 = add_ln158_fu_202_p2.read().range(2, 1);
}

void fetch::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ins_port_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln145_fu_167_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln145_fu_167_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_load_queue_V_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_gemm_queue_V_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_store_queue_V_V_U_apdone_blk.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

void fetch::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_ins_port_AWVALID\" :  \"" << m_axi_ins_port_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_AWREADY\" :  \"" << m_axi_ins_port_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWADDR\" :  \"" << m_axi_ins_port_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWID\" :  \"" << m_axi_ins_port_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWLEN\" :  \"" << m_axi_ins_port_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWSIZE\" :  \"" << m_axi_ins_port_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWBURST\" :  \"" << m_axi_ins_port_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWLOCK\" :  \"" << m_axi_ins_port_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWCACHE\" :  \"" << m_axi_ins_port_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWPROT\" :  \"" << m_axi_ins_port_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWQOS\" :  \"" << m_axi_ins_port_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWREGION\" :  \"" << m_axi_ins_port_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_AWUSER\" :  \"" << m_axi_ins_port_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_WVALID\" :  \"" << m_axi_ins_port_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_WREADY\" :  \"" << m_axi_ins_port_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_WDATA\" :  \"" << m_axi_ins_port_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_WSTRB\" :  \"" << m_axi_ins_port_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_WLAST\" :  \"" << m_axi_ins_port_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_WID\" :  \"" << m_axi_ins_port_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_WUSER\" :  \"" << m_axi_ins_port_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARVALID\" :  \"" << m_axi_ins_port_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_ARREADY\" :  \"" << m_axi_ins_port_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARADDR\" :  \"" << m_axi_ins_port_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARID\" :  \"" << m_axi_ins_port_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARLEN\" :  \"" << m_axi_ins_port_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARSIZE\" :  \"" << m_axi_ins_port_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARBURST\" :  \"" << m_axi_ins_port_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARLOCK\" :  \"" << m_axi_ins_port_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARCACHE\" :  \"" << m_axi_ins_port_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARPROT\" :  \"" << m_axi_ins_port_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARQOS\" :  \"" << m_axi_ins_port_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARREGION\" :  \"" << m_axi_ins_port_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_ARUSER\" :  \"" << m_axi_ins_port_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_RVALID\" :  \"" << m_axi_ins_port_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_RREADY\" :  \"" << m_axi_ins_port_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_RDATA\" :  \"" << m_axi_ins_port_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_RLAST\" :  \"" << m_axi_ins_port_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_RID\" :  \"" << m_axi_ins_port_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_RUSER\" :  \"" << m_axi_ins_port_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_RRESP\" :  \"" << m_axi_ins_port_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_BVALID\" :  \"" << m_axi_ins_port_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_ins_port_BREADY\" :  \"" << m_axi_ins_port_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_BRESP\" :  \"" << m_axi_ins_port_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_BID\" :  \"" << m_axi_ins_port_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_ins_port_BUSER\" :  \"" << m_axi_ins_port_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"load_queue_V_V_TDATA\" :  \"" << load_queue_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"load_queue_V_V_TVALID\" :  \"" << load_queue_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"load_queue_V_V_TREADY\" :  \"" << load_queue_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"gemm_queue_V_V_TDATA\" :  \"" << gemm_queue_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"gemm_queue_V_V_TVALID\" :  \"" << gemm_queue_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"gemm_queue_V_V_TREADY\" :  \"" << gemm_queue_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"store_queue_V_V_TDATA\" :  \"" << store_queue_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"store_queue_V_V_TVALID\" :  \"" << store_queue_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"store_queue_V_V_TREADY\" :  \"" << store_queue_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWVALID\" :  \"" << s_axi_CONTROL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWREADY\" :  \"" << s_axi_CONTROL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWADDR\" :  \"" << s_axi_CONTROL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WVALID\" :  \"" << s_axi_CONTROL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_WREADY\" :  \"" << s_axi_CONTROL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WDATA\" :  \"" << s_axi_CONTROL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WSTRB\" :  \"" << s_axi_CONTROL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARVALID\" :  \"" << s_axi_CONTROL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARREADY\" :  \"" << s_axi_CONTROL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARADDR\" :  \"" << s_axi_CONTROL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RVALID\" :  \"" << s_axi_CONTROL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_RREADY\" :  \"" << s_axi_CONTROL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RDATA\" :  \"" << s_axi_CONTROL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RRESP\" :  \"" << s_axi_CONTROL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BVALID\" :  \"" << s_axi_CONTROL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_BREADY\" :  \"" << s_axi_CONTROL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BRESP\" :  \"" << s_axi_CONTROL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


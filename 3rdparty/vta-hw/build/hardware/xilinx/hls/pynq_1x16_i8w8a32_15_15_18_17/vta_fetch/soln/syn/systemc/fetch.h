// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fetch_HH_
#define _fetch_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fetch_CONTROL_BUS_s_axi.h"
#include "fetch_ins_port_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_INS_PORT_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_INS_PORT_ID_WIDTH = 1,
         unsigned int C_M_AXI_INS_PORT_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_INS_PORT_DATA_WIDTH = 128,
         unsigned int C_M_AXI_INS_PORT_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_INS_PORT_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_INS_PORT_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_INS_PORT_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32>
struct fetch : public sc_module {
    // Port declarations 74
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_ins_port_AWVALID;
    sc_in< sc_logic > m_axi_ins_port_AWREADY;
    sc_out< sc_uint<C_M_AXI_INS_PORT_ADDR_WIDTH> > m_axi_ins_port_AWADDR;
    sc_out< sc_uint<C_M_AXI_INS_PORT_ID_WIDTH> > m_axi_ins_port_AWID;
    sc_out< sc_lv<8> > m_axi_ins_port_AWLEN;
    sc_out< sc_lv<3> > m_axi_ins_port_AWSIZE;
    sc_out< sc_lv<2> > m_axi_ins_port_AWBURST;
    sc_out< sc_lv<2> > m_axi_ins_port_AWLOCK;
    sc_out< sc_lv<4> > m_axi_ins_port_AWCACHE;
    sc_out< sc_lv<3> > m_axi_ins_port_AWPROT;
    sc_out< sc_lv<4> > m_axi_ins_port_AWQOS;
    sc_out< sc_lv<4> > m_axi_ins_port_AWREGION;
    sc_out< sc_uint<C_M_AXI_INS_PORT_AWUSER_WIDTH> > m_axi_ins_port_AWUSER;
    sc_out< sc_logic > m_axi_ins_port_WVALID;
    sc_in< sc_logic > m_axi_ins_port_WREADY;
    sc_out< sc_uint<C_M_AXI_INS_PORT_DATA_WIDTH> > m_axi_ins_port_WDATA;
    sc_out< sc_uint<C_M_AXI_INS_PORT_DATA_WIDTH/8> > m_axi_ins_port_WSTRB;
    sc_out< sc_logic > m_axi_ins_port_WLAST;
    sc_out< sc_uint<C_M_AXI_INS_PORT_ID_WIDTH> > m_axi_ins_port_WID;
    sc_out< sc_uint<C_M_AXI_INS_PORT_WUSER_WIDTH> > m_axi_ins_port_WUSER;
    sc_out< sc_logic > m_axi_ins_port_ARVALID;
    sc_in< sc_logic > m_axi_ins_port_ARREADY;
    sc_out< sc_uint<C_M_AXI_INS_PORT_ADDR_WIDTH> > m_axi_ins_port_ARADDR;
    sc_out< sc_uint<C_M_AXI_INS_PORT_ID_WIDTH> > m_axi_ins_port_ARID;
    sc_out< sc_lv<8> > m_axi_ins_port_ARLEN;
    sc_out< sc_lv<3> > m_axi_ins_port_ARSIZE;
    sc_out< sc_lv<2> > m_axi_ins_port_ARBURST;
    sc_out< sc_lv<2> > m_axi_ins_port_ARLOCK;
    sc_out< sc_lv<4> > m_axi_ins_port_ARCACHE;
    sc_out< sc_lv<3> > m_axi_ins_port_ARPROT;
    sc_out< sc_lv<4> > m_axi_ins_port_ARQOS;
    sc_out< sc_lv<4> > m_axi_ins_port_ARREGION;
    sc_out< sc_uint<C_M_AXI_INS_PORT_ARUSER_WIDTH> > m_axi_ins_port_ARUSER;
    sc_in< sc_logic > m_axi_ins_port_RVALID;
    sc_out< sc_logic > m_axi_ins_port_RREADY;
    sc_in< sc_uint<C_M_AXI_INS_PORT_DATA_WIDTH> > m_axi_ins_port_RDATA;
    sc_in< sc_logic > m_axi_ins_port_RLAST;
    sc_in< sc_uint<C_M_AXI_INS_PORT_ID_WIDTH> > m_axi_ins_port_RID;
    sc_in< sc_uint<C_M_AXI_INS_PORT_RUSER_WIDTH> > m_axi_ins_port_RUSER;
    sc_in< sc_lv<2> > m_axi_ins_port_RRESP;
    sc_in< sc_logic > m_axi_ins_port_BVALID;
    sc_out< sc_logic > m_axi_ins_port_BREADY;
    sc_in< sc_lv<2> > m_axi_ins_port_BRESP;
    sc_in< sc_uint<C_M_AXI_INS_PORT_ID_WIDTH> > m_axi_ins_port_BID;
    sc_in< sc_uint<C_M_AXI_INS_PORT_BUSER_WIDTH> > m_axi_ins_port_BUSER;
    sc_out< sc_lv<128> > load_queue_V_V_TDATA;
    sc_out< sc_logic > load_queue_V_V_TVALID;
    sc_in< sc_logic > load_queue_V_V_TREADY;
    sc_out< sc_lv<128> > gemm_queue_V_V_TDATA;
    sc_out< sc_logic > gemm_queue_V_V_TVALID;
    sc_in< sc_logic > gemm_queue_V_V_TREADY;
    sc_out< sc_lv<128> > store_queue_V_V_TDATA;
    sc_out< sc_logic > store_queue_V_V_TVALID;
    sc_in< sc_logic > store_queue_V_V_TREADY;
    sc_in< sc_logic > s_axi_CONTROL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CONTROL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH/8> > s_axi_CONTROL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CONTROL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CONTROL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CONTROL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const5;
    sc_signal< sc_lv<32> > ap_var_for_const6;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const2;
    sc_signal< sc_lv<2> > ap_var_for_const3;
    sc_signal< sc_lv<4> > ap_var_for_const4;
    sc_signal< sc_lv<128> > ap_var_for_const7;
    sc_signal< sc_lv<16> > ap_var_for_const8;


    // Module declarations
    fetch(sc_module_name name);
    SC_HAS_PROCESS(fetch);

    ~fetch();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fetch_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>* fetch_CONTROL_BUS_s_axi_U;
    fetch_ins_port_m_axi<0,128,32,5,16,16,16,16,C_M_AXI_INS_PORT_ID_WIDTH,C_M_AXI_INS_PORT_ADDR_WIDTH,C_M_AXI_INS_PORT_DATA_WIDTH,C_M_AXI_INS_PORT_AWUSER_WIDTH,C_M_AXI_INS_PORT_ARUSER_WIDTH,C_M_AXI_INS_PORT_WUSER_WIDTH,C_M_AXI_INS_PORT_RUSER_WIDTH,C_M_AXI_INS_PORT_BUSER_WIDTH,C_M_AXI_INS_PORT_USER_VALUE,C_M_AXI_INS_PORT_PROT_VALUE,C_M_AXI_INS_PORT_CACHE_VALUE>* fetch_ins_port_m_axi_U;
    regslice_both<128>* regslice_both_load_queue_V_V_U;
    regslice_both<128>* regslice_both_gemm_queue_V_V_U;
    regslice_both<128>* regslice_both_store_queue_V_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > insn_count;
    sc_signal< sc_lv<32> > insns_V;
    sc_signal< sc_logic > ins_port_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ins_port_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > load_queue_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > icmp_ln879_reg_267;
    sc_signal< sc_lv<1> > icmp_ln879_1_reg_271;
    sc_signal< sc_lv<1> > icmp_ln158_reg_275;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<1> > icmp_ln879_reg_267_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln879_1_reg_271_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln158_reg_275_pp0_iter3_reg;
    sc_signal< sc_logic > gemm_queue_V_V_TDATA_blk_n;
    sc_signal< sc_logic > store_queue_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ins_port_AWREADY;
    sc_signal< sc_logic > ins_port_WREADY;
    sc_signal< sc_logic > ins_port_ARVALID;
    sc_signal< sc_logic > ins_port_ARREADY;
    sc_signal< sc_lv<32> > ins_port_ARADDR;
    sc_signal< sc_logic > ins_port_RVALID;
    sc_signal< sc_logic > ins_port_RREADY;
    sc_signal< sc_lv<128> > ins_port_RDATA;
    sc_signal< sc_logic > ins_port_RLAST;
    sc_signal< sc_lv<1> > ins_port_RID;
    sc_signal< sc_lv<1> > ins_port_RUSER;
    sc_signal< sc_lv<2> > ins_port_RRESP;
    sc_signal< sc_logic > ins_port_BVALID;
    sc_signal< sc_lv<2> > ins_port_BRESP;
    sc_signal< sc_lv<1> > ins_port_BID;
    sc_signal< sc_lv<1> > ins_port_BUSER;
    sc_signal< sc_lv<32> > pc_0_reg_136;
    sc_signal< sc_lv<32> > insn_count_read_reg_223;
    sc_signal< sc_lv<28> > insns_V1_reg_229;
    sc_signal< sc_lv<1> > icmp_ln145_fu_167_p2;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter3;
    sc_signal< bool > ap_predicate_op56_write_state12;
    sc_signal< bool > ap_predicate_op57_write_state12;
    sc_signal< bool > ap_predicate_op58_write_state12;
    sc_signal< bool > ap_block_state12_io;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter4;
    sc_signal< bool > ap_predicate_op63_write_state13;
    sc_signal< bool > ap_predicate_op65_write_state13;
    sc_signal< bool > ap_predicate_op67_write_state13;
    sc_signal< bool > ap_block_state13_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > pc_fu_172_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<128> > raw_insn_reg_249;
    sc_signal< sc_lv<128> > raw_insn_reg_249_pp0_iter2_reg;
    sc_signal< sc_lv<3> > opcode_V_fu_178_p1;
    sc_signal< sc_lv<3> > opcode_V_reg_256;
    sc_signal< sc_lv<3> > memory_type_V_reg_262;
    sc_signal< sc_lv<1> > icmp_ln879_fu_192_p2;
    sc_signal< sc_lv<1> > icmp_ln879_1_fu_197_p2;
    sc_signal< sc_lv<1> > icmp_ln158_fu_217_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<64> > empty_fu_157_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<3> > add_ln158_fu_202_p2;
    sc_signal< sc_lv<2> > tmp_fu_207_p4;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > regslice_both_load_queue_V_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_gemm_queue_V_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_store_queue_V_V_U_apdone_blk;
    sc_signal< bool > ap_block_state14;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > load_queue_V_V_TVALID_int;
    sc_signal< sc_logic > load_queue_V_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_load_queue_V_V_U_vld_out;
    sc_signal< sc_logic > gemm_queue_V_V_TVALID_int;
    sc_signal< sc_logic > gemm_queue_V_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_gemm_queue_V_V_U_vld_out;
    sc_signal< sc_logic > store_queue_V_V_TVALID_int;
    sc_signal< sc_logic > store_queue_V_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_store_queue_V_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_pp0_stage0;
    static const sc_lv<10> ap_ST_fsm_state14;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_INS_PORT_USER_VALUE;
    static const int C_M_AXI_INS_PORT_PROT_VALUE;
    static const int C_M_AXI_INS_PORT_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<16> ap_const_lv16_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_add_ln158_fu_202_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state12_io();
    void thread_ap_block_state12_pp0_stage0_iter3();
    void thread_ap_block_state13_io();
    void thread_ap_block_state13_pp0_stage0_iter4();
    void thread_ap_block_state14();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_predicate_op56_write_state12();
    void thread_ap_predicate_op57_write_state12();
    void thread_ap_predicate_op58_write_state12();
    void thread_ap_predicate_op63_write_state13();
    void thread_ap_predicate_op65_write_state13();
    void thread_ap_predicate_op67_write_state13();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_empty_fu_157_p1();
    void thread_gemm_queue_V_V_TDATA_blk_n();
    void thread_gemm_queue_V_V_TVALID();
    void thread_gemm_queue_V_V_TVALID_int();
    void thread_icmp_ln145_fu_167_p2();
    void thread_icmp_ln158_fu_217_p2();
    void thread_icmp_ln879_1_fu_197_p2();
    void thread_icmp_ln879_fu_192_p2();
    void thread_ins_port_ARADDR();
    void thread_ins_port_ARVALID();
    void thread_ins_port_RREADY();
    void thread_ins_port_blk_n_AR();
    void thread_ins_port_blk_n_R();
    void thread_load_queue_V_V_TDATA_blk_n();
    void thread_load_queue_V_V_TVALID();
    void thread_load_queue_V_V_TVALID_int();
    void thread_opcode_V_fu_178_p1();
    void thread_pc_fu_172_p2();
    void thread_store_queue_V_V_TDATA_blk_n();
    void thread_store_queue_V_V_TVALID();
    void thread_store_queue_V_V_TVALID_int();
    void thread_tmp_fu_207_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif

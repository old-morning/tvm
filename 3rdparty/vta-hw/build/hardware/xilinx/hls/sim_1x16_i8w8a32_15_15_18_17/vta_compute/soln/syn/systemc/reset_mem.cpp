// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "reset_mem.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic reset_mem::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic reset_mem::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> reset_mem::ap_ST_fsm_state1 = "1";
const sc_lv<2> reset_mem::ap_ST_fsm_state2 = "10";
const sc_lv<32> reset_mem::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> reset_mem::ap_const_lv32_1 = "1";
const sc_lv<1> reset_mem::ap_const_lv1_0 = "0";
const sc_lv<16> reset_mem::ap_const_lv16_0 = "0000000000000000";
const sc_lv<64> reset_mem::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<512> reset_mem::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> reset_mem::ap_const_lv64_FFFFFFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<16> reset_mem::ap_const_lv16_1 = "1";
const sc_lv<1> reset_mem::ap_const_lv1_1 = "1";
const bool reset_mem::ap_const_boolean_1 = true;

reset_mem::reset_mem(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln37_fu_70_p2);
    sensitive << ( sram_idx_V_read );
    sensitive << ( range_V );

    SC_METHOD(thread_add_ln700_fu_92_p2);
    sensitive << ( t_V_reg_50 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_76_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_76_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( add_ln37_reg_108 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_76_p2 );

    SC_METHOD(thread_i_fu_81_p2);
    sensitive << ( i_op_assign_reg_59 );

    SC_METHOD(thread_icmp_ln37_fu_76_p2);
    sensitive << ( range_V );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_op_assign_reg_59 );

    SC_METHOD(thread_mem_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln544_fu_87_p1 );

    SC_METHOD(thread_mem_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mem_V_d0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mem_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_76_p2 );

    SC_METHOD(thread_zext_ln544_fu_87_p1);
    sensitive << ( t_V_reg_50 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln37_fu_76_p2 );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "reset_mem_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sram_idx_V_read, "(port)sram_idx_V_read");
    sc_trace(mVcdFile, range_V, "(port)range_V");
    sc_trace(mVcdFile, mem_V_address0, "(port)mem_V_address0");
    sc_trace(mVcdFile, mem_V_ce0, "(port)mem_V_ce0");
    sc_trace(mVcdFile, mem_V_we0, "(port)mem_V_we0");
    sc_trace(mVcdFile, mem_V_d0, "(port)mem_V_d0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, add_ln37_fu_70_p2, "add_ln37_fu_70_p2");
    sc_trace(mVcdFile, add_ln37_reg_108, "add_ln37_reg_108");
    sc_trace(mVcdFile, i_fu_81_p2, "i_fu_81_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln700_fu_92_p2, "add_ln700_fu_92_p2");
    sc_trace(mVcdFile, icmp_ln37_fu_76_p2, "icmp_ln37_fu_76_p2");
    sc_trace(mVcdFile, t_V_reg_50, "t_V_reg_50");
    sc_trace(mVcdFile, i_op_assign_reg_59, "i_op_assign_reg_59");
    sc_trace(mVcdFile, zext_ln544_fu_87_p1, "zext_ln544_fu_87_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

reset_mem::~reset_mem() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void reset_mem::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_76_p2.read(), ap_const_lv1_0))) {
        i_op_assign_reg_59 = i_fu_81_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_op_assign_reg_59 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_76_p2.read(), ap_const_lv1_0))) {
        t_V_reg_50 = add_ln700_fu_92_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        t_V_reg_50 = sram_idx_V_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        add_ln37_reg_108 = add_ln37_fu_70_p2.read();
    }
}

void reset_mem::thread_add_ln37_fu_70_p2() {
    add_ln37_fu_70_p2 = (!range_V.read().is_01() || !sram_idx_V_read.read().is_01())? sc_lv<16>(): (sc_biguint<16>(range_V.read()) + sc_biguint<16>(sram_idx_V_read.read()));
}

void reset_mem::thread_add_ln700_fu_92_p2() {
    add_ln700_fu_92_p2 = (!t_V_reg_50.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(t_V_reg_50.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void reset_mem::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void reset_mem::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void reset_mem::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln37_fu_76_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void reset_mem::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void reset_mem::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_76_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void reset_mem::thread_ap_return() {
    ap_return = add_ln37_reg_108.read();
}

void reset_mem::thread_i_fu_81_p2() {
    i_fu_81_p2 = (!i_op_assign_reg_59.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(i_op_assign_reg_59.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void reset_mem::thread_icmp_ln37_fu_76_p2() {
    icmp_ln37_fu_76_p2 = (!i_op_assign_reg_59.read().is_01() || !range_V.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_reg_59.read() == range_V.read());
}

void reset_mem::thread_mem_V_address0() {
    mem_V_address0 =  (sc_lv<11>) (zext_ln544_fu_87_p1.read());
}

void reset_mem::thread_mem_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        mem_V_ce0 = ap_const_logic_1;
    } else {
        mem_V_ce0 = ap_const_logic_0;
    }
}

void reset_mem::thread_mem_V_d0() {
    mem_V_d0 = ap_const_lv512_lc_1;
}

void reset_mem::thread_mem_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_76_p2.read(), ap_const_lv1_0))) {
        mem_V_we0 = ap_const_lv64_FFFFFFFFFFFFFFFF;
    } else {
        mem_V_we0 = ap_const_lv64_0;
    }
}

void reset_mem::thread_zext_ln544_fu_87_p1() {
    zext_ln544_fu_87_p1 = esl_zext<64,16>(t_V_reg_50.read());
}

void reset_mem::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln37_fu_76_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

